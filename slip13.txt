B) Create table Company (id, name, address, phno). Create Android Application for performing the following operation on the table.(using sqlite database)
i) Insert New Company Details.
ii) Show All the Company Details.




Activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<TableLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
tools:context=".MainActivity">
<TableRow>
<EditText
android:layout_height="50dp"
android:layout_width="100dp"
android:id="@+id/et1"
android:hint="name"/>
</TableRow>
<TableRow>
<EditText
android:layout_height="50dp"
android:layout_width="200dp"
android:id="@+id/et2"
android:hint="address"/>
</TableRow>
<TableRow>
<EditText
android:layout_height="50dp"
android:layout_width="100dp"
android:id="@+id/et3"
android:hint="contact"/>
</TableRow>
<TableRow>
<Button
android:layout_height="50dp"
android:layout_width="100dp"
android:text="SAVE"
android:id="@+id/b1"/>
</TableRow>
<TableRow>
<Button
android:layout_height="50dp"
android:layout_width="100dp"
android:text="SHOW"
android:id="@+id/b2"/>
</TableRow>
<TableRow>
<ListView
android:layout_height="wrap_content"
android:layout_width="wrap_content"
android:id="@+id/lv"/>
</TableRow>
</TableLayout>
MainActivity.java
package com.example.mycompany;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;
import java.util.Collections;
import java.util.List;
public class MainActivity extends AppCompatActivity {
EditText et1, et2, et3;
Button b1, b2;
ListView lv;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
et1 = (EditText) findViewById(R.id.et1);
et2 = (EditText) findViewById(R.id.et2);
et3 = (EditText) findViewById(R.id.et3);
b1 = (Button) findViewById(R.id.b1);
b2 = (Button) findViewById(R.id.b2);
lv = (ListView) findViewById(R.id.lv);
MyDB mydb = new MyDB(this, "company.db", null, 1);
String name = et1.getText().toString();
String addr = et2.getText().toString();
String contact = et3.getText().toString();
b1.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View view) {
long r = mydb.addDetails(name, addr, contact);
if(r>0){
Toast.makeText(MainActivity.this, "Values inserted successfully",
Toast.LENGTH_SHORT).show();
}
else{
Toast.makeText(MainActivity.this, "Error in inserting values",
Toast.LENGTH_SHORT).show();
}
}
});
b2.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View view) {
List<Company> l = mydb.getDetails();
Toast.makeText(getApplicationContext(),l.toString(),Toast.LENGTH_LONG).show()
;
ArrayAdapter aa = new
ArrayAdapter<Company>(getApplicationContext(),
android.R.layout.simple_list_item_1);
lv.setAdapter(aa);
}
});
}
}
Company.java
package com.example.mycompany;
import android.util.Log;
public class Company {
String cname, addr, contact;
public Company(String ccname, String caddr, String ccontact){
this.cname = ccname;
this.addr = caddr;
this.contact = ccontact;
}
public String getCname(){
return this.cname;
}
public String getAddr(){
return this.addr;
}
public String getContact(){
return this.contact;
}
@Override public String toString(){
String val = this.cname + " " + this.addr + " " + this.contact;
Log.d("Customer=",val);
return val;
}
}
MyDB.java
package com.example.mycompany;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import java.util.ArrayList;
class MyDB extends SQLiteOpenHelper {
String dbname = "company";
public MyDB(Context c, String dbname, SQLiteDatabase.CursorFactory cf, int
version){
super(c, dbname, cf, version);
}
@Override public void onCreate(SQLiteDatabase db){
db.execSQL("create table company(cname text, caddr text, cphone text)");
}
@Override
public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
}
public long addDetails(String name, String addr, String contact){
ContentValues cv = new ContentValues();
cv.put("cname", name);
cv.put("caddr", addr);
cv.put("cphone", contact);
SQLiteDatabase db = this.getWritableDatabase();
long ret = db.insert("company", null, cv);
return ret;
}
public ArrayList<Company> getDetails(){
String sql = "select * from customer";
SQLiteDatabase db = this.getReadableDatabase();
ArrayList<Company> clist =new ArrayList();
Cursor c = db.rawQuery(sql, null);
if(c.getCount()>0){
c.moveToFirst();
do{
String name = c.getString(c.getColumnIndexOrThrow("cname"));
String addr= c.getString(c.getColumnIndexOrThrow("caddr"));
String contact = c.getString(c.getColumnIndexOrThrow("cphone"));
String val = name + " " + addr + " " + contact;
Company c1 = new Company(name, addr, contact);
Log.d("Company=",c1.toString());
clist.add(c1);
}while(c.moveToNext());
}
return clist;
}
}



A) Write a C program that redirects standard output to a file output.txt. (use of dup and open system call).



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
int main(void) {
int number1, number2, sum;
int input_fds = open("./input.txt", O_RDONLY);
if(dup2(input_fds, STDIN_FILENO) < 0) {
printf("Unable to duplicate file descriptor.");
exit(EXIT_FAILURE);
}
scanf("%d %d", &number1, &number2);
sum = number1 + number2;
printf("%d + %d = %d\n", number1, number2, sum);
return EXIT_SUCCESS;
}



B) Write a C program that behaves like a shell (command interpreter). It has its own prompt say “NewShell$”. Any normal shell command is executed from your shell by starting a child process to execute the system program corresponding to the command. It should additionally interpret the following command.
i) typeline +10 <filename> - print first 10 lines of file
ii) typeline -20 <filename> - print last 20 lines of file
iii) typeline a <filename> - print all lines of file



#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<dirent.h>
char *buff,*t1,*t2,*t3,ch;
int pid;
void list(char t2,char *t3)
{
DIR *dir;
struct dirent *entry;
int cnt=0;
dir=opendir(t3);
if (dir==NULL)
{
printf("Directory %s not found",t3);
return;
}
switch(t2)
{
case 'f' : while((entry=readdir(dir))!=NULL)
{
printf("%s\n",entry->d_name);
}
break;
case 'n' : while((entry=readdir(dir))!=NULL)
cnt++;
printf("Total No of Entries: %d\n",cnt);
break;
case 'i' : while((entry=readdir(dir))!=NULL)
{
printf("\n%s\t %d",entry->d_name,entry->d_ino);
}
break;
default : printf("Invalid argument");
}
closedir(dir);
}
main()
{
while(1)
{
printf("myshell$");
fflush(stdin);
t1=(char *)malloc(80);
t2=(char *)malloc(80);
t3=(char *)malloc(80);
buff=(char *)malloc(80);
fgets(buff,80,stdin);
sscanf(buff,"%s %s %s",t1,t2,t3);
if(strcmp(t1,"pause")==0)
exit(0);
else if(strcmp(t1,"list")==0)
list(t2[0],t3);
else
{
pid=fork();
if(pid<0)
printf("Child process is not created\n");
else if(pid==0)
{
execlp("/bin",NULL);
if(strcmp(t1,"exit")==0)
exit(0);
system(buff);
}
else
{
wait(NULL);
exit(0);
}
}
}
}
/*Output:-
[root@localhost ass1]# ./a.out
myshell$list f ass2
rr.C
NPSJP.C
PSJF.C
PRIORITY.BAK
..
.
PP.BAK
PRIORITY.C
PP.C
myshell$list n ass2
Total No of Entries: 9
myshell$list i ass2
rr.C 1452033
NPSJP.C 1452013
PSJF.C 1452032
PRIORITY.BAK 1452016
.. 1451875
. 1452001
PP.BAK 1452014
PRIORITY.C 1452017
PP.C 1452015
myshell$ls
#a.c# a.out ass2 a.txt b.c count.c list.c search.c s.txt typeline.c
myshell$pause




