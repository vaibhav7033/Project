B) By using Spinner, Buttons. Write a Android program to draw following GUI.



Activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<TableLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
tools:context=".MainActivity">
<TableRow>
<TextView
android:id="@+id/tv"
android:layout_width="200dp"
android:layout_height="50dp"
android:text="Enter Item:"
android:textSize="30dp"/>
<EditText
android:id="@+id/et"
android:layout_width="200dp"
android:layout_height="50dp"
android:textSize="30dp"/>
</TableRow>
<TableRow>
<Button
android:id="@+id/b1"
android:layout_width="200dp"
android:layout_height="80dp"
android:textSize="15dp"
android:text="Add to list"/>
<Button
android:id="@+id/b2"
android:layout_width="200dp"
android:layout_height="80dp"
android:text="Remove from list"
android:textSize="15dp" />
</TableRow>
<TableRow>
<TextView
android:id="@+id/tv1"
android:layout_width="200dp"
android:layout_height="50dp"
android:text="See response below"
android:textSize="20dp"/>
</TableRow>
<TableRow>
<Spinner
android:id="@+id/sp"
android:layout_width="200dp"
android:layout_height="50dp"/>
</TableRow>
</TableLayout>
MainActivity.java
package com.example.myspinner;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;
import java.util.ArrayList;
import java.util.Arrays;
public class MainActivity extends AppCompatActivity {
Button b1,b2;
EditText et;
Spinner spinner;
String data[]={"Fruits"};
ArrayList list=new ArrayList(Arrays.asList(data));
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
b1=(Button)findViewById(R.id.b1);
b2=(Button)findViewById(R.id.b2);
et=(EditText)findViewById(R.id.et);
spinner=(Spinner)findViewById(R.id.sp);
ArrayAdapter adapter=new ArrayAdapter(this,
androidx.appcompat.R.layout.support_simple_spinner_dropdown_item,list);
spinner.setAdapter(adapter);
b1.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
String s=et.getText().toString();
list.add(s);
adapter.notifyDataSetChanged();
spinner.setAdapter(adapter);
Toast.makeText(getApplicationContext(), "Item added to spinner",
Toast.LENGTH_SHORT).show();
}
});
b2.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
String s=et.getText().toString();
list.remove(s);
adapter.notifyDataSetChanged();
spinner.setAdapter(adapter);
Toast.makeText(getApplicationContext(), "Item removed from spinner",
Toast.LENGTH_SHORT).show();
}
});
}
}



A) Write a C program to create a file with hole in it.



#include <fcntl.h>
#include<stdio.h>
#include<stdlib.h>
char buf1[] = "welcome";
char buf2[] = "Computer science";
int main(void)
{
int fd;
if ((fd = creat("file_with_hole.txt",0777 )) < 0)
printf("creat error");
if (write(fd, buf1, 7) != 7)
printf("buf1 write error");
lseek(fd,100,SEEK_CUR);
if (write(fd, buf2, 16) != 16)
printf("buf2 write error");
exit(0);
}



B) Write a C program which display the information of a given file similar to given by the unix /linux command on current directory (l.e File Access permission, file name, file type, User id, group id, file size, file access and modified time and so on)
ls â€“l <filename>
DO NOT simply exec ls -l <filename> or system command from the program




#include<stdio.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<stdlib.h>
#include<time.h>
void sfile(char const filename []);
char * formatdate(char *str,time_t val)
{
strftime(str,36,"%d %m %Y %H:%M:%S",localtime(&val));
return str;
}
int main()
{
ssize_t read;
char *buffer=0;
size_t buf_size=0;
printf("Enter the name of a file to check:\n");
read=getline(&buffer,&buf_size,stdin);
if(read<=0)
{
printf("getline failed \n");
exit(1);
}
if(buffer[read-1]=='\n')
{
buffer[read-1]=0;
}
int s=open(buffer,O_RDONLY);
if(s==-1)
{
printf("File does not exits\n");
exit(1);
}
else
{
sfile(buffer);
}
free(buffer);
return 0;
}
void sfile(char const filename [])
{
struct stat sfile;
char date[36];
if(stat(filename,&sfile)==-1)
{
printf("Error Occurred\n");
}
printf("Access:%s\n",formatdate(date,sfile.st_atime));
printf("Modify:%s\n",formatdate(date,sfile.st_mtime));
printf("Change:%s\n",formatdate(date,sfile.st_ctime));
// accessing data members of stat struct
printf("\nFile st_ino %d\n",sfile.st_ino);
printf("\nFile st_mode %o\n",sfile.st_mode);
printf("\nFile st_atime %d\n",sfile.st_atime);
printf("\nFile st_uid %d\n",sfile.st_uid);
printf("\nFile st_blksize %d\n",sfile.st_blksize);
printf("\nFile st_gid %d\n",sfile.st_gid);
printf("\nFile st_blocks %ld\n",sfile.st_blocks);
printf("\nFile st_size %ld\n",sfile.st_size);
printf("\nFile at_nlink %u\n",sfile.st_nlink);
printf("\nFile Permission User\n");
printf((sfile.st_mode & S_IRUSR)?"r":"_");
printf((sfile.st_mode & S_IWUSR)?"w":"_");
printf((sfile.st_mode & S_IXUSR)?"x":"_");
printf("\n");
printf("\nFile Permission Group\n");
printf((sfile.st_mode & S_IRGRP)?"r":"_");
printf((sfile.st_mode & S_IWGRP)?"w":"_");
printf((sfile.st_mode & S_IXGRP)?"x":"_");
printf("\n");
printf("\nFile Permission Other\n");
printf((sfile.st_mode & S_IROTH)?"r":"_");
printf((sfile.st_mode & S_IWOTH)?"w":"_");
printf((sfile.st_mode & S_IXOTH)?"x":"_");
printf("\n");
}





